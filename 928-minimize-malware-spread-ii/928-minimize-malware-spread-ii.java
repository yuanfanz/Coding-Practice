class Solution {
    class UF {
        int[] parent;
        int[] size;
        public UF(int N){
            parent = new int[N];
            size = new int[N];
            for (int i = 0; i < N; i++){
                parent[i] = i;
                size[i] = 1;
            }
        }
        public int find(int x){
            if (parent[x] == x){
                return x;
            }
            return find(parent[x]);
        }
        public void union(int x, int y){
            int rootX = find(x);
            int rootY = find(y);
            if (rootX != rootY){
                parent[rootX] = rootY;
                size[rootY] += size[rootX];
            }
        }
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int N = graph.length;
        if (initial.length == 1){
            return initial[0];
        }
        int max = N;
        int res = -1;
        for (int k = 0; k < initial.length; k++){
            UF uf = new UF(N);
            int removePt = initial[k];
            for (int i = 0; i < N; i++){
                for (int j = 0; j < N; j++){
                    if (i == removePt || j == removePt){
                        continue;
                    }
                    if (graph[i][j] == 1){
                        uf.union(i, j);
                    }
                }
            }
            int totalInfected = 0;
            Set<Integer> seen = new HashSet<>();//avoid to add the same group multiple times
            for (int init : initial){
                if (init == removePt){
                    continue;
                }
                int root = uf.find(init);
                int size = uf.size[root];
                if (!seen.contains(root)){
                    seen.add(root);
                    totalInfected += size;
                }
            }
            if (max > totalInfected){
                res = removePt;
                max = totalInfected;
            }else if (totalInfected == max && removePt < res){
                res = removePt;
            }
        }
        return res;
    }
}