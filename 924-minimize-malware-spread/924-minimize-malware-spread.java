class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        UnionFind uf = new UnionFind(n);
        
        int root = n;
        int min = n;
        for (int i = 0; i < n; ++i) {
            for (int j = 1; j < graph[i].length; ++j) {
                if (i == j) continue;
                if (graph[i][j] == 1) {
                    uf.union(i, j);
                }
            }
        }
        int[] infectedCountById = new int[n];
        for (int i : initial) {
            int initialRoot = uf.find(i);
            infectedCountById[initialRoot]++;
        }
        
        // sort initial array, so that we start from smaller index
        Arrays.sort(initial);
        
        int maxSize = 0;
        int res = initial[0];
        
        for (int i = 0; i < initial.length; ++i) {
            int curRoot = uf.find(initial[i]);
            int infectedCount = infectedCountById[curRoot];
            // we only want component that only have 1 node infected
            // this is because we can only remove one node
            if (infectedCount == 1) {
                int curSize = uf.size[curRoot];
                if (curSize > maxSize) {
                    maxSize = curSize;
                    res = initial[i];
                }
            }
        }
        return res;
    }
    
    class UnionFind{
        int[] parent;
        int count;
        int[] size;
        public UnionFind(int n) {
            parent = new int[n + 1];
            size = new int[n + 1];
            for (int i = 0; i <= n; ++i) {
                parent[i] = i;
                size[i] = 1;
            }
            count = n + 1;
        }
        public int find(int p) {
            while (p != parent[p]) {
                parent[p] = parent[parent[p]];
                p = parent[p];
            }
            return p;
        }
        public void reset(int p) {
            parent[p] = p;
        }
        public void union(int p, int q) {
            int rootP = find(p);
            int rootQ = find(q);
            if (rootP == rootQ) return;
            if (rootP > rootQ) {
                parent[rootQ] = rootP;
                size[rootP] += size[rootQ];
            } else {
                parent[rootP] = rootQ;
                size[rootQ] += size[rootP];
            }
            count--;
        }
    }
}